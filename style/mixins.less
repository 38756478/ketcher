@import 'lesshat';

.text-hide(transparent) {
	font: ~"0/0" a;
	color: transparent;
	text-shadow: none;
	background-color: transparent;
	border: 0;
}

.text-hide(indent) {
	@approximate_em_value: 12px / 1em;
	@wider_than_any_screen: -9999em;
	text-indent: @wider_than_any_screen * @approximate_em_value;
	overflow: hidden;
	text-align: left;
}

.text-hide() {
	.text-hide(indent);
}

.min-height(@value) {
	min-height: @value;
	height: auto !important;
	height: 100%;
}

.inline-block() {
	*display: inline;
	display: -moz-inline-box;
	-moz-box-orient: vertical;
	display: inline-block;
	vertical-align: middle;
	*vertical-align: auto;
}

// Effects

.scale-highlight() {
	.transition(transform, 0.1s, ease-out);
	.scale(1.2);
}

.shadow-highlight(@color: @active-color, inset) {
	.box-shadow(0px -1px 6px fade(@color, 5%) inset, 0px 1px 3px @color inset;);
}

.shadow-highlight(@color: @active-color) {
	.box-shadow(0 0 3px 4px fade(@color, 12%));
}

.circle-highlight(@color: @active-color, @inset: '') {
	.border-radius((@icon-size + @icon-padding) / 2);
	.box-shadow(~'0 0 4px @{color} @{inset}');
}

.symbol-highlight(@color: @active-color) {
	color: @active-color;
	text-shadow: 1px 1px 3px @color;
}

.symbol-invert-highlight() {
	background: #333;
	text-shadow: 0px 1px 10px white, 0px -1px 10px white;
}

.invert-highlight() {
	background: #333;
	color: white;
}

////////////

.control() {
	color: @main-color;
	background-color: white;
	background-image: none;
	.border-radius(4px);

	&[disabled] {
		color: @disabled-color;
	}
	&:active, &:focus {
		outline: 0;
	}
}

////////////

.colorize(@color) when not (@color = inherit) {
	color: @color;
}

.monochrome-icons(@names, @color: inherit, @i: 1) when (@i <= length(@names)) {
	@item: extract(@names, @i);
	@icon: 'icon-@{item}';
	#@{item}:before { content: @@icon; .colorize(@color); }
	.monochrome-icons(@names, @color, (@i + 1));
}

.twocolor-icons(@names, @color-A: inherit, @color-B: inherit, @i: 1) when (@i <= length(@names)) {
	@item: extract(@names, @i);
	@icon-A: 'icon-@{item}-A';
	@icon-B: 'icon-@{item}-B';
	#@{item}:before { content: @@icon-A; .colorize(@color-A); }
	#@{item}:after { content: @@icon-B; .colorize(@color-B); }
	.twocolor-icons(@names, @color-A, @color-B, (@i + 1));
}

.sketching-atom-icons(@names, @i: 1) when (@i <= length(@names)) {
	@item: extract(@names, @i);
	@color: 'atom-sketching-@{item}-color';
	button.@{item} {
		color: @@color;
	}
	.sketching-atom-icons(@names, (@i + 1));
}
