@import 'lesshat';

.text-hide(transparent) {
	font: ~"0/0" a;
	color: transparent;
	text-shadow: none;
	background-color: transparent;
	border: 0;
}

.text-hide(indent) {
	@approximate_em_value: 12px / 1em;
	@wider_than_any_screen: -9999em;
	text-indent: @wider_than_any_screen * @approximate_em_value;
	overflow: hidden;
	text-align: left;
}

.text-hide() {
	.text-hide(indent);
}

.remove-inline-spacing() {
	font-size: 0.00001px;
	-webkit-text-size-adjust: none;
}

// Effects

.scale-highlight() {
	.transition(transform, 0.2s, ease-out);
	.scale(1.25);
}

.scale-highlight(none) {
	.scale(1);
}

.shadow-highlight(@color: @active-color, inset) {
	.box-shadow(0px -1px 6px fade(@color, 5%) inset, 0px 1px 3px @color inset);
}

.shadow-highlight(@color: @active-color) when (iscolor(@color)) {
	.box-shadow(inset 0 0 1px 1px fade(@color, 12%));
}

.circle-highlight(@color: @active-color, @inset: '') {
	.border-radius((@icon-size + @icon-padding) / 2);
	.box-shadow(~'0 0 4px @{color} @{inset}');
}

.symbol-highlight(@color: @active-color) {
	color: @active-color;
	text-shadow: 1px 1px 3px @color;
}

.symbol-invert-highlight() {
	background: #333;
	text-shadow: 0px 1px 10px white, 0px -1px 10px white;
}

.invert-highlight() {
	background: #444;
	color: white;
}

.invert-highlight(none) {
	background: inherit;
	color: @disabled-color;	// hint for menus
}


////////////

.control() {
	.border-radius(4px);

	&[disabled] {
		color: @disabled-color;
	}
	&:active, &:focus {
		outline: 0;
	}
}

////////////

.flow(@direction) {
	.to-index(top) { @index: 0; }
	.to-index(right) { @index: 1; }
	.to-index(bottom) { @index: 2; }
	.to-index(left) { @index: 3; }
	@directions: top right bottom left;
	@dimensions: width height;
	@rising: right bottom;
	@losing: left top;
	.to-index(@direction);

	@main-start: extract(@directions, mod(@index, 4) + 1);
	@main-end: extract(@directions, mod((@index + 2), 4) + 1);
	@main-dim: extract(@dimensions, mod((@index + 1), 2) + 1);
	@main-rise: extract(@rising, mod(@index + 1, 2) + 1);
	@main-lose: extract(@losing, mod(@index + 1, 2) + 1);

	@cross-start: extract(@directions, mod((@index + 3), 4) + 1);
	@cross-end: extract(@directions, mod((@index + 1), 4) + 1);
	@cross-dim: extract(@dimensions, mod(@index, 2) + 1);
	@cross-rise: extract(@rising, mod(@index, 2) + 1);
	@cross-lose: extract(@losing, mod(@index, 2) + 1);
}

.toolbar-pos(@direction) {
	.flow(@direction);
	position: absolute;
	@{main-start}: @app-gap;
	@{cross-start}: @canvas-padding;
	@{cross-end}: @canvas-padding;
	@{main-dim}: @toolbar-size;

	&>menu {
		@{cross-dim}: 100%;
	}
}

.separator(@direction, @lose-pad, @rise-pad: @lose-pad) {
	.flow(@direction);
	& + li {
		margin-@{cross-lose}: @lose-pad;
		border-@{cross-lose}: 1px solid @border-color;
		padding-@{cross-lose}: @rise-pad;
	}
}

.separators(@direction, @lose-pad, @rise-pad: @lose-pad) {
	.flow(@direction);
	menu {
		padding-@{cross-rise}: @rise-pad;
		padding-@{cross-lose}: @lose-pad;
		border-@{cross-lose}: 1px solid @border-color;
	}
	li:first-child menu {
		border: none;
		padding-@{cross-lose}: 0;
	}
}

////////////

.colorize(@color) when not (@color = inherit) {
	color: @color;
}

.monochrome-icons(@names, @color: inherit, @i: 1) when (@i <= length(@names)) {
	@item: extract(@names, @i);
	@icon: 'icon-@{item}';
	#@{item} button:before { content: @@icon; .colorize(@color); }
	.monochrome-icons(@names, @color, (@i + 1));
}

.twocolor-icons(@names, @color-A: inherit, @color-B: inherit, @i: 1) when (@i <= length(@names)) {
	@item: extract(@names, @i);
	@icon-A: 'icon-@{item}-A';
	@icon-B: 'icon-@{item}-B';
	#@{item} button:before { content: @@icon-A; .colorize(@color-A); }
	#@{item} button:after { content: @@icon-B; .colorize(@color-B); }
	.twocolor-icons(@names, @color-A, @color-B, (@i + 1));
}

.sketching-atom-icons(@names, @i: 1) when (@i <= length(@names)) {
	@item: extract(@names, @i);
	@color: 'atom-sketching-@{item}-color';
	button.@{item} {
		color: @@color;
	}
	.sketching-atom-icons(@names, (@i + 1));
}
